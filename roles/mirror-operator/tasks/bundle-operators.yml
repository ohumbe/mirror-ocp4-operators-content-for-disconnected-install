---
- name: '{{ ansible_name_module }} | podman:login | Login to quay container registry'
  no_log: true
  command: >
    podman login -u {{ default_operator_registry_username }} \
      -p {{ default_operator_registry_password }} \
      --authfile {{ hostvars[inventory_hostname].ansible_env.HOME }}/.docker/oprconfig.json \
      {{ default_operator_registry }}

- name: '{{ ansible_name_module }} | podman:login | Login to extra registry'
  no_log: true
  command: >
    podman login -u {{ default_operator_registry_username }} \
      -p {{ default_operator_registry_password }} \
      --authfile {{ hostvars[inventory_hostname].ansible_env.HOME }}/.docker/oprconfig.json \
      {{ item.value.image_registry }}
  with_dict:
    - "{{ operator_registries_to_mirror }}"
  when:
    - item.key is defined and item.key != ""
    - item.value.mirror is defined and item.value.mirror | bool
    - item.value.source is defined and item.value.source != ""
    - item.value.image_registry is defined and item.value.image_registry != ""


- name: '{{ ansible_name_module }} | set_fact |  authfile for registry'
  set_fact:
    default_operator_registry_auth_config: "{{ hostvars[inventory_hostname].ansible_env.HOME }}/.docker/oprconfig.json"

- name: '{{ ansible_name_module }} | copy | copy source operator auth file to bundle location '
  copy:
    dest: "{{ registry_container_dir }}/source-operators-pull-secret.json"
    remote_src: true
    src: "{{ default_operator_registry_auth_config }}"
    force: true

- name: '{{ ansible_name_module }} | podman:run | Start registry container '
  command: podman run -d --name {{ registry_container_name }} \
    -p 5000:5000 -v {{ registry_container_dir }}:/var/lib/registry:z \
      {{ registry_container_image }}

- name: '{{ ansible_name_module }} | podman:run | Start operator-index container '
  command: podman run -d --name operator_collector_{{ item.key  }} \
    -p {{ item.value.host_port }}:{{ item.value.container_port }}  {{ item.value.source }}
  with_dict:
    - "{{ operator_registries_to_mirror }}"
  when:
    - item.key is defined and item.key != ""
    - item.value.mirror is defined and item.value.mirror | bool
    - item.value.source is defined and item.value.source != ""
    - item.value.host_port is defined and item.value.host_port|int > 0
    - item.value.container_port is defined and item.value.container_port|int > 0

- name: '{{ ansible_name_module }} | copy | opm client to bastion'
  when:
    - install_opm is defined
    - install_opm | bool 
  block:
    - name: '{{ ansible_name_module }} | copy | opm client to bastion'
      copy:
        src: "{{ opm_client_binary }}"
        dest: "/tmp/{{ opm_client_binary | basename }}"
        force: yes
      register: opm_client_copied

    - name: '{{ ansible_name_module }} | shell | verify exiting opm binary on bastion'
      shell: which opm
      ignore_errors: true
      register: installed_opm

    - name: '{{ ansible_name_module }} | shell | remove existing opm binary from registry'
      shell: rm -f {{ item }}
      with_items:
        - "{{ installed_opm.stdout }}"
      when:
        - installed_opm is defined
        - installed_opm.stdout is defined
        - installed_opm.stdout != ''

    - name: '{{ ansible_name_module }} | stat | opm binary file exist on bastion'
      stat:
        path: "/tmp/{{ opm_client_binary | basename }}"
      register: opm_client_st

    - name: '{{ ansible_name_module }} | command | install opm binary to bastion'
      command: "tar zxvf /tmp/{{ opm_client_binary | basename }} -C /usr/bin"
      become: yes

- name: '{{ ansible_name_module }} | install | grpcurl to bastion'
  when:
    - install_grpcurl is defined
    - install_grpcurl | bool 
  block:
    - name: '{{ ansible_name_module }} | copy | grpcurl binary to bastion'
      copy:
        src: "{{ grpcurl_binary }}"
        dest: "/tmp/{{ grpcurl_binary | basename }}"
        force: yes
      register: grpcurl_copied

    - name: '{{ ansible_name_module }} | shell | verify exiting grpcurl binary on bastion'
      shell: which grpcurl
      failed_when:
        - installed_grpcurl.rc > 1
        - not 'no grpcurl in' in installed_grpcurl.stderr
      ignore_errors: true
      register: installed_grpcurl

    - name: '{{ ansible_name_module }} | shell | remove existing grpcurl binary from registry'
      shell: rm -f {{ item }}
      with_items:
        - "{{ installed_grpcurl.stdout }}"
      when:
        - installed_grpcurl is defined
        - installed_grpcurl.stdout is defined
        - installed_grpcurl.stdout != ''

    - name: '{{ ansible_name_module }} | stat | grpcurl binary file exist on bastion'
      stat:
        path: "/tmp/{{ grpcurl_binary | basename }}"
      register: grpcurl_client_st

    - name: '{{ ansible_name_module }} | command | install grpcurl binary to bastion'
      command: "tar zxvf /tmp/{{ grpcurl_binary | basename }} -C /usr/bin"

- name: '{{ ansible_name_module }} | file:state=directory | Ensure Archive directory exist '
  file:
    path: "{{ dir_bundle_location }}"
    state: directory
    recurse: true

- name: '{{ ansible_name_module }} | Create Package index '
  shell: >
    grpcurl -plaintext localhost:{{ item.value.host_port }} api.Registry/ListPackages \
    > "{{ dir_bundle_location | d('/tmp') }}/packages-{{ item.key }}.out"
  with_dict:
    - "{{ operator_registries_to_mirror }}"
  when:
    - item.key is defined and item.key != ""
    - item.value.mirror is defined and item.value.mirror | bool
    - item.value.host_port is defined and item.value.host_port|int > 0
    - item.value.container_port is defined and item.value.container_port|int > 0
  register: pkg_idx_out

- name: '{{ ansible_name_module }} | opm:index:prune | prune package index '
  block:
    - name: '{{ ansible_name_module }} | opm:index:prune | update operator index image '
      command: >
        opm index prune \
        -f {{ item.value.source }} \
        -p {{ item.value.mirrored_operator_list }} \
        -t localhost:5000/{{ item.value.source.split('/')[1] }}/{{ item.value.source.split('/')[2] }}
      with_dict:
        - "{{ operator_registries_to_mirror }}"
      when:
        - item.key is defined and item.key != ""
        - item.value.mirrored_operator_list is defined and item.value.mirrored_operator_list != ""
        - item.value.mirror is defined and item.value.mirror | bool
        - item.value.source is defined and item.value.source != ""

    - name: '{{ ansible_name_module }} | podman:push | push updated operator index image'
      command: >
        podman push --tls-verify=false localhost:5000/{{ item.value.source.split('/')[1] }}/{{ item.value.source.split('/')[2] }}
      with_dict:
        - "{{ operator_registries_to_mirror }}"
      when:
        - item.key is defined and item.key != ""
        - item.value.mirror is defined and item.value.mirror | bool
        - item.value.source is defined and item.value.source != ""
        - item.value.mirrored_operator_list is defined and item.value.mirrored_operator_list != ""

- name: '{{ ansible_name_module }} | push original operator index image bundle '
  block:
    - name: '{{ ansible_name_module }} | Mirror operator catalog | {{ openshift_client_binary }}:image:mirror'
      command: >
        {{ openshift_client_binary }} image mirror  \
        -a "{{ default_operator_registry_auth_config }}" \
        {{ item.value.source }} \
        localhost:5000/{{ item.value.source.split('/')[1] }}/{{ item.value.source.split('/')[2] }} \
        --insecure=true
      with_dict:
        - "{{ operator_registries_to_mirror }}"
      when:
        - item.key is defined and item.key != ""
        - item.value.mirror is defined and item.value.mirror | bool
        - item.value.source is defined and item.value.source != ""
        - not item.value.mirrored_operator_list is defined or item.value.mirrored_operator_list == ""
      register: catalog_mirrored

    - name: '{{ ansible_name_module }} | Mirror operator catalog | set_fact:manifest_folder'
      set_fact:
        manifest_dirs: "{{ manifest_dirs | d([]) + [(item.stdout_lines[-1].split(' ')[-1])] }}"
      with_items: "{{ catalog_mirrored.results }}"
      when:
        - item.stdout_lines is defined
      register: manifest_dir_facts_out
  
- name: '{{ ansible_name_module }} | Mirror operator catalog | local registry '
  block:
    - name: '{{ ansible_name_module }} | Mirror operator catalog | login to source registries'
      no_log: true
      command: > 
        podman login -u {{ default_operator_registry_username }} \
          -p {{ default_operator_registry_password }} \
          --authfile {{ hostvars[inventory_hostname].ansible_env.HOME }}/.docker/oprconfig.json \
          {{ item.value.source }}
      with_dict:
        - "{{ operator_registries_to_mirror }}"
      when:
        - item.key is defined and item.key != ""
        - item.value.mirror is defined and item.value.mirror | bool
        - item.value.source is defined and item.value.source != ""
      register: registries_login

    - name: '{{ ansible_name_module }} | file:absent | ensure merged authfile for registries absent'

      file:
        path: "{{ dir_bundle_staging }}/operators-registry.json"
        state: absent

    - name: '{{ ansible_name_module }} | Mirror operator catalog | {{ openshift_client_binary }}:adm:catalog:mirror'
      command: >
        {{ openshift_client_binary }} adm catalog mirror localhost:5000/{{ item.value.source.split('/')[1] }}/{{ item.value.source.split('/')[2] }} \
         localhost:5000 \
        -a "{{ default_operator_registry_auth_config }}" \
         --filter-by-os=".*" \
         --insecure=true
      with_dict:
        - "{{ operator_registries_to_mirror }}"
      when:
        - item.key is defined and item.key != ""
        - item.value.mirror is defined and item.value.mirror | bool
        - item.value.source is defined and item.value.source != ""
      register: catalog_mirrored

    - name: '{{ ansible_name_module }} | Mirror operator catalog | set_fact:manifest_folder'
      set_fact:
        manifest_dirs: "{{ manifest_dirs | d([]) + [(item.stdout_lines[-1].split(' ')[-1])] }}"
      with_items: "{{ catalog_mirrored.results }}"
      when:
        - item.stdout_lines is defined
      register: manifest_dir_facts_out
  

- name: '{{ ansible_name_module }} | mirror registry container '
  block:
    - name: '{{ ansible_name_module }} | podman:tag | tag container image registry image'
      command: >
        podman tag {{ registry_container_image }} \
        localhost:5000/{{ registry_container_image.split('/')[1] }}/{{ registry_container_image.split('/')[2] }} 

    - name: '{{ ansible_name_module }} | podman:push | push container image registry image'
      command: >
        podman push --tls-verify=false \
        localhost:5000/{{ registry_container_image.split('/')[1] }}/{{ registry_container_image.split('/')[2] }} 

    - name: '{{ ansible_name_module }} | podman:save | save container image registry image'
      shell: podman save > {{ registry_container_dir }}/'container-registry-image.tar' \
        localhost:5000/{{ registry_container_image.split('/')[1] }}/{{ registry_container_image.split('/')[2] }}

- name: '{{ ansible_name_module }} | command: copy | copy manifest files '
  command: cp -r {{ (item }} {{ registry_container_dir }}/
  loop: "{{ manifest_dirs }}"
  register: manifest_copied

- name: '{{ ansible_name_module }} | archive:xz | create operator image bundle '
  become: yes
  command: > 
    tar -c --use-compress-program='pigz -9' -v \
      -f "{{ dir_bundle_location }}/{{ bundle_file_name }}" \
      -C {{ registry_container_dir }} . 
  args:
    creates: "{{ dir_bundle_location }}/{{ bundle_file_name }}"
    warn: false
    chdir: "{{ registry_container_dir }}/"

- name: '{{ ansible_name_module }} | cleanup staging resources | bundles staging directories'
  when:
    - item.key is defined and item.key != ""
    - item.value.mirror is defined and item.value.mirror | bool
    - item.value.source is defined and item.value.source != ""
    - item.value.host_port is defined and item.value.host_port|int > 0
    - item.value.container_port is defined and item.value.container_port|int > 0
  block:
    - name: '{{ ansible_name_module }} | podman:rm | Remove operator-index container '
      command: podman rm -f operator_collector_{{ item.key }} 
      with_dict:
        - "{{ operator_registries_to_mirror }}"

    - name: '{{ ansible_name_module }} | podman:rm | Remove mirror-registry '
      command: podman rm -f {{ registry_container_name | d('mirror-registry') }} 
